%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{describe-data}
%\VignetteEncoding{UTF-8}
\documentclass{article}
\addtolength{\hoffset}{-1cm}
\addtolength{\textwidth}{2cm}
% \usepackage[table]{xcolor}
% \addtolength{\voffset}{-1.5cm}
% \addtolength{\textheight}{3cm}

\title{Describe data}
\author{Henrik Renlund}

<<"setup", cache = FALSE, echo = FALSE, include = FALSE>>=
library(knitr)
## library(descripteur)
devtools::load_all()
opts_chunk$set(include = TRUE,
               echo = TRUE,
               cache = FALSE)
knit_hooks$set(document = function(x) {
    sub(pattern = '\\usepackage[]{color}',
        replacement = '\\usepackage[table]{xcolor}',
        x, fixed = TRUE)
})
if(FALSE){
    knitr::knit2pdf("describe-data.rnw", clean = TRUE)
    shell.exec("describe-data.pdf")
}
@

\begin{document}

\maketitle

\tableofcontents

\newpage

\setcounter{section}{-1}
\section{Changes}
The package has had a change in that there are now 3 aspects of data
description, \emph{description}, \emph{comparison} and \emph{test}. Tests used
to be thought of as part of comparisons, but in many cases it seems better to
keep these separate. This vignette is not updated to reflect this change.

\section{Data description approach}

\subsection{Describing and comparing}

In this package, a description of a data frame (or similar object)
consist of a grouping and 2 sets of functions, \emph{describers} and
\emph{comparers}. The simplest grouping is the trivial grouping where we
consider 1 group consisting of all the units, in which case there is
nothing to compare and a description is the set of describing
functions applied, in turn, to all relevant variables.

If a grouping exists, we can apply comparing functions to the
different groups. There are 2 different types of comparisons
(\texttt{comp}) available:

\begin{itemize}
  \item  "overall" is when the grouping is fed to some function that makes
an overall comparison, like an anova analysis (for arbitrary many
groups) or a t-test (in which case there must be exactly 2 groups).
  \item  "across" and "adjacent" are pairwise comparisons of each group
  with respect to either the first, or the previous, group as given by
  order of the grouping.
\end{itemize}
If a grouping exist, this will impact the description (\texttt{desc}) (unless
specified elsewise):
\begin{itemize}
  \item  "each" is the describing functions applied to all groups, in
    turn. This option will be default when considering an "overall"
    comparison.
  \item  "first" is the describing functions applied only to the first
    group. This will be default when considerig an "across" or
    "adjacent" comparison.
\end{itemize}

In all cases we can also choose to have description and comparisons
set to \texttt{TRUE} or \texttt{FALSE}, to get the default behaviour or suppress the
description/comparison, respectively. (\texttt{NULL} will enforce the default
behaviour of always describing and always comparing in the presence of
a grouping.)

\subsection{Data types and a guide}

We do not describe all kinds of data in the same manner. Thus, this
package differentiates between different kinds of data types:

\begin{itemize}
 \item \texttt{real} real, i.e. numeric
 \item \texttt{bnry} binary, i.e. variables with 2 distinct values
 \item \texttt{catg} categorical,
 \item \texttt{date} (what it sais), and
 \item \texttt{surv} Surv (from the survival package).
\end{itemize}

This will be determined by a 'guide', in the form of a data frame that for each
variables specifies how it is to be described. By default, any (numeric or text)
variable with only 2 distinct values will be regarded as \texttt{bnry}, other
text- and factor variables are \texttt{catg} (but they will be ignored if the
number of unique values exceed \texttt{catg.tol}, to exclude id variables), the
classes 'Date' and 'POSIXct' (and POSIXlt) are \texttt{date} and numerical
variables with enough distinct values (more than \texttt{real.tol}) are
\texttt{real}.

If you do not want to accept the defaults you can create a guide via
\texttt{dtable\_guide} with non-default arguments (e.g.\ by setting
\texttt{as.is} to \texttt{TRUE} to treat variables according to their class), or
manipulate the resulting object directly.

<<>>=
df <- data.frame(
   r1 = 1:4 + .1,
   r2 = 4:1 + .2,
   b = rep(0:1, 2),
   c = letters[c(1,2,3,3)],
   d = as.Date("2000-01-01") + 1:4,
   gr = rep(c("foo", "bar"), each = 2),
   s = survival::Surv(1:4, c(1,0,1,0))
)
df$b[3] <- NA
g <- dtable_guide(df, real.tol = 3)
print(g)
@


\subsection{Function lists}

You can supply the describing and comparing functions that you wish to use, one
list each. There are a few restrictions and/or features if you want to write
your own functions:
\begin{itemize}
\item If a function has a 'weight'-parameter, this should be called \texttt{w}.

  Functions within the package should warn if you pass a \texttt{w} argument to
  a function that could be thought to use a weighting argument but where none is
  implemented.
\item Functions need to have the argument \texttt{...} for technical reasons
  (all parameters are passed to the function lists, so functions must be able to
  ignore parameter values that they do not use).
\item We keep track of metadata by assigning values \texttt{desc} and
  \texttt{comp} to attribute \texttt{dattr} of the functions that describe and
  compare, respectively. If the function list supplied do not have this
  attribute it is set automatically.

  \textbf{Update:} there is, as of version $\geq 2.0.1$ also a value
  \texttt{test} to be able to separate comparison measures from tests.

  There is also a \texttt{meta} value that is mostly used internally but can be
  useful for things that should not be copied when a table is being put
  together. E.g.\ a function list for categorical data might include simply
  listing the levels, but this need only be done once. The \texttt{dattr} can be
  set with the function \texttt{dattr}, which is a simple wrapper function for
  \texttt{attr}.
\item Comparing functions need to take a \texttt{glist} argument and the glist
  will be a logical list (indices) for the subgroups. A pairwise comparer thus
  needs to compare \texttt{x[glist[[1]]]} to \texttt{x[glist[[2]]]}. A function
  that makes an overall comparison might need to use \texttt{factorize\_glist},
  which tries to recreate\footnote{This seems a big awkward and there is
    probably a better way to handle it, but it is due to that groupings need not
    be created from a categorical variable to begin with (to allow for
    overlaping groups).} a categorical variable from the \texttt{glist}.

  Functions within the package should warn if e.g.\ a glist of length 3 is
  passed to a function that only makes a pairwise comparison.
\item A function that needs the variable name can use \texttt{xname} as this is
  passed internally to the function (and hence you should not use that argument
  name for something else)
\item Functions can utilize a \texttt{useNA} that is \texttt{TRUE/FALSE} that in
  turn will be managed by \texttt{dtable} via the the possible values
  \texttt{ifany}, \texttt{always} and \texttt{no} such that, in the case
  of \texttt{ifany}, it look in the guide to see if there are any missing
  values. This is due to the fact that if a function handles \texttt{NA} in some
  way this should be uniform over all subgroups (since some subgroups might have
  missing values and others might not). \textbf{This ``feature'' is currently a
    bit\ldots suboptimal.}
\end{itemize}

Lets set up both a descriptive and a comparative function list.
<<>>=
Rdesc <- list(
    "myMean" = function(x, ...) mean(x),
    "myMeta" = function(x, ...) "some info"
)
dattr(Rdesc) <- c("desc", "meta")
Rcomp <- list(
    "myDiff" = function(x,glist,...){
        mean(x[glist[[1]]], na.rm = TRUE) - mean(x[glist[[2]]], na.rm = TRUE)
    },
    "myMeta" = function(x, ...) "some info"
)
dattr(Rcomp) <- c("comp", "meta")
@

Now we can make a simple description of the \texttt{real} variables.
<<>>=
dtable(data = df, type = "real", guide = g, desc.flist = Rdesc)
@
(Note that the print method also shows the meta data, here 'size' is sample size
and 'cc' is complete cases.)



However, we anticipate that the describers and comparers are typically wanted
for repeat use in which case one can change the default values. The default
values are viewed with \texttt{opts\_desc\$get()}, changed with
\texttt{opts\_desc\$set} and restored to default values with
\texttt{opts\_desc\$restore()} (in line with global parameter settings in
\textbf{knitr}).

With the function list we defined above, we can change to default describers and
comparers for the \texttt{real} type with the following:
<<>>=
opts_desc$set(
        "describe_real" = Rdesc,
        "compare_real"  = Rcomp
        )
@

Subgroup comparisons can be made by supplying a logical list of indices for the
subgroups (in this manner the subgroups can be overlapping). In our experience
however, the typical use of subgroups is via some categorical variable. The
argument \texttt{glist} will take a logical list, or if given a character string
the function will create\footnote{Using the function \texttt{make\_glist}.} the
logical list from the corresponding variable in the data set.

E.g.\ an "overall" (the default) comparison on a grouping based on the
variable \texttt{gr} (a binary variable)
<<>>=
dtable(data = df, type = "real", guide = g, glist = "gr")
@
Note above that the \texttt{myMeta} function is included in both the describer
and comparer functions, but is not repeated (due to \texttt{dtable} attribute
``meta'').

You can supress the description part by setting \texttt{desc} to \texttt{FALSE}.
<<>>=
dtable(data = df, type = "real", guide = g, glist = "gr",
       desc = FALSE)
@

We could also make comparisons "across" the \texttt{c} variable, a \texttt{catg}
variable with 3 values. Here each group besides the first (i.e.\ "b"
and "c") are compared to the first (here excluding description)

<<>>=
dtable(data = df, type = "real", guide = g, glist = "c",comp = "across")
@

If we instead want to compare "b" to "a" and "c" to "b" we make the
comparison "adjacent".

<<>>=
(dt <- dtable(data = df, type = "real", guide = g, glist = "c",
       comp = "adjacent"))
@

A dtable will keep additional information (some of which are seen when printed).
<<>>=
attributes(dt)
@


\subsection{A wrapper for \texttt{Hmisc::latex}}

The package comes with a wrapper for \texttt{Hmisc::latex} that will use the
metadata to create a (hopefully) decent table. It can also invoke a format
funtion (\texttt{dtable\_format}) if wanted.

Table \ref{tab:1} and \ref{tab:2} shows the default tables created with and
without groups, respectively.

<<results = 'asis'>>=

opts_desc$restore()
dt <- dtable(data = df, type = "real", guide = g)
dtable_latex(dt, caption = "Default table without groups",
             format = TRUE, label = "tab:1")

@

The option \texttt{bling = TRUE} (default) will utilize the metadata via the
parameters that can be set as a list by the argument \texttt{bling.param}, which
is passed to \texttt{attr2text}. This controls what additional attributes are
printed below the table.

<<results = 'asis'>>=

opts_desc$restore()
dt <- dtable(data = df, type = "real", guide = g, glist = "gr")
dtable_latex(dt, caption = "Default table with groups",
             format = T, label = "tab:2")

@

\subsection{Predefined comparers and describers}

There are many predefined comparers and describers within the package. These can
be easily chosen with the \texttt{flist} function. E.g. there are describers for
counting the number of records and number of missing, \texttt{d\_n} and
\texttt{d\_missing}, respectively. To choose these as the default describers for
\texttt{real} variables, with names ``count'' and ``count\_missing'',
respectively:

<<>>=
opts_desc$set("describe_real" =
                  flist(c("count" = "d_n", "count_missing" = "d_missing")))
@

\subsubsection{Naming scheme for predefined functions}

Describing and comparing functions have prefix \texttt{d\_} and \texttt{c\_},
respectively, so there is e.g.\ a predfined \texttt{d\_mean} (which implicitly
applies to numerical data, most often type \texttt{real})
<<>>=
d_mean
@

Some definitions are distinct for different data types and so requires different
functions, if so they can have a ``second'' prefix beginning with the first
letter of the type, so there is e.g.\ \texttt{d\_rstd} and \texttt{d\_bstd}
which calculated the standard difference (\texttt{std}) for \texttt{real} and
\texttt{bnry}, respectively. (This may not be 100\% consistently implemented.)

The functions available should have some kind of (at least minimal)
documentation, e.g.\ type \texttt{?d\_real} to get a list of all describers
applicable to the \texttt{real} type.

\newpage

\section{A more realistic example with default values}

Create some fake data
<<>>=
n <- 200
set.seed(20160216)
df <- data.frame(
    id = paste0("id", 1001:(1000 + n)),
    r1 = round(rnorm(n, 20, 5)),
    r2 = round(rexp(n, 1/20)),
    c1 = sample(letters[1:5], size = n, replace = TRUE),
    c2 = factor(sample(LETTERS[5:3], size = n, replace = TRUE),
                levels = LETTERS[6:3]),
    b1 = sample(LETTERS[6:7], size = n, replace = TRUE, prob = 2:3),
    b2 = rbinom(n, 1, 0.1),
    b3 = sample(c("No", "Yes"), size = n, replace = TRUE, prob = 1:2),
    b4 = sample(c(TRUE, FALSE), size = n, replace = TRUE),
    b5 = factor("one-level", levels = c("none-of-these", "one-level")),
    d1 = as.Date("2000-01-01") + rpois(n, 365),
    d2 = as.Date(floor(rexp(n, 1/3650)), origin = "1975-01-01"),
    s1 = survival::Surv(time = rnorm(n, 50, 7), event = rbinom(n, 1, 0.1)),
    s2 = survival::Surv(time = rexp(n, 1/40), event = rbinom(n, 1, 0.2)),
    stringsAsFactors = FALSE
)
misser <- function(x, m = length(x)){
    p <- floor(runif(1, min = 1, max = m/10))
    x[sample(1:n, size = p, replace = FALSE)] <- NA
    x
}
df[c(2,4,7,10)] <- lapply(df[c(2,4,7,10)], misser)
dtg <- dtable_guide(df, unit.id = "id")
dtg$label <- c("Binary 1", "Bengt", "Bio", "Bam", "B before A",
               "Cats Are Fun", "Cool",
               "Datum", "Doey", "IdEnTiFiEr",
               "RoYe", "RandomNessy",
               "Slipp", "Slopp")
gl <- descripteur:::make_glist("b1", ref = df)
gl3 <- list(
    "abacus" = sample(c(T,F), size = n, replace =T),
    "quuz" = sample(c(T,F), size = n, replace =T),
    "blazt" = sample(c(T,F), size = n, replace =T)
)
vikt <- rpois(n, 1.5) + 1
opts_desc$restore()
@

Look at the guide

<<>>=
dtg
@

The labels will be used in \LaTeX\, tables (provided the guide is specified).

<<"test-after-updates", include = FALSE, eval = FALSE>>=
dtable(df, type = "real")
dtable(df, type = "real", glist = gl, describe = "each")
dtable(df, type = "real", glist = gl, describe = "each", test = TRUE)
(tmp1 <- dtable(df, type = "real", glist = gl, comp = FALSE))
(tmp2 <- dtable(df, type = "real", glist = gl, desc = FALSE))
(tmp3 <- dtable(df, type = "real", glist = gl, desc = FALSE,
               comp = FALSE, test = TRUE))
attr(tmp1, "dtable")
attr(tmp2, "dtable")
attr(tmp3, "dtable")
dtable_cbind(tmp1, tmp2)
dtable_cbind(tmp2, tmp3)
dtable_cbind(tmp1, tmp2)
@


\clearpage
\subsection{Type \texttt{real}}
<<results = 'asis'>>=
dtable_latex(dtable(df, type = "real", glist = gl), format = TRUE,
             caption = paste("Two groups described and compared",
                             "for type \\texttt{real}."),
             label = "ex:real1")
@
<<results = 'asis'>>=
dtable_latex(dtable(df, type = "real", glist = gl3, w = vikt,
             comp = "across"), format = T, guide = dtg,
             caption = paste("Three weighted groups described and",
                             "compared 'across' for type \\texttt{real}."),
             label = "ex:real2")
@

\clearpage
\subsection{Type \texttt{bnry}}
<<results = 'asis'>>=
dtable_latex(dtable(df, type = "bnry", glist = gl), format = T,
             caption = paste("Two groups described and compared",
                             "for type \\texttt{bnry}."),
             label = "ex:bnry1")
@
<<results = 'asis'>>=
dtable_latex(dtable(df, type = "bnry", glist = gl3, w = vikt,
             comp = "across"), format = T, guide = dtg,
             caption = paste("Three weighted groups described and",
                             "compared 'across' for type \\texttt{bnry}."),
             label = "ex:bnry2")
@

<<eval = FALSE, include = FALSE, echo = FALSE>>=
## dtable(df, type = "bnry", glist = gl3, w = vikt,
##        comp = "across", guide = dtable_guide(df, reduce.levels = F))
## (dt <- dtable(df, type = "bnry", glist = "b1", w = vikt,
##        comp = "across", guide = dtable_guide(df, reduce.levels = F)))
## a <- attributes(dt)
## for(k in 5:11) attr(dt, names(a)[k]) <- NULL
## attr2text(a)
## dtable_attr(a)
## dtable_latex(dt, bling = FALSE)
## dtable_latex(dt, bling = TRUE)
@

\clearpage
\subsection{Type \texttt{catg}}
<<results = 'asis'>>=
dtable_latex(dtable(df, type = "catg", glist = gl), format = TRUE,
             caption = paste("Two groups described and compared",
                             "for type \\texttt{catg}."),
             label = "ex:catg1")
@
<<results = 'asis'>>=
dtable_latex(dtable(df, type = "catg", glist = gl3, w = vikt,
             comp = "across"), format = T, guide = dtg, grey = TRUE,
             caption = paste("Three weighted groups described and",
                             "compared 'across' for type \\texttt{catg}.",
                             "(Every other line grey.)"),
             label = "ex:catg2")
@

\subsubsection{Is the distinction between \texttt{catg} and \texttt{bnry} annoying?}
If you think the \texttt{bnry} type is superfluous, you can edit the 'guide' by
hand, or more quickly supply the \texttt{no.bnry = TRUE} argument.

<<results = 'asis'>>=
nobnry <- dtable_guide(df, no.bnry = TRUE)
dtable_latex(dtable(df, type = "catg", glist = gl, guide = nobnry),
             format = TRUE, grey = "variable",
             caption = paste("Two groups described and compared for type ",
                             " \\texttt{catg} (including binary variables). ",
                             "(Grey lines according to column 'variable'.)"),
             label = "ex:distinction")
@

\clearpage
\subsubsection{What is the deal with \texttt{useNA}?}
There are not (currently) many uses for the \texttt{useNA} option. One of the
few is for controlling wether to explicitly describe this as a value for
categorical variables. However, this sort of forces all functions relating to
categorical variables to have this option\footnote{Should this be
  removed?}.

<<results = 'asis'>>=
opts_desc$set("describe_catg" = flist(c(
                  "levels" = "d_levels",
                  "percent" = "d_percent",
                  "proportion" = "d_cp")))
dtable_latex(dtable(df, type = "catg", glist = gl, useNA = "ifany"), format = T,
             caption = paste("Two groups described and compared",
                             "for type \\texttt{catg}."),
             label = "ex:useNA")
@

Now, lets restore the default values.
<<>>=
opts_desc$restore()
@

\clearpage
\subsection{Type \texttt{date}}
<<results = 'asis'>>=
dtable_latex(dtable(df, type = "date", glist = gl), format = T,
             caption = paste0("Two groups described and compared for",
                              " type \\texttt{date}."),
             label = "ex:date1")
@
<<results = 'asis'>>=
dtable_latex(dtable(df, type = "date", glist = gl3, w = vikt, comp = "across"),
             format = T,  guide = dtg,
             caption = paste("Three 'weighted' groups described and compared",
                             "'across' for type \\texttt{date}."),
             label = "ex:date2")
@

\clearpage
\subsection{Type \texttt{surv}}
<<results = 'asis'>>=
dtable_latex(dtable(df, type = "surv", glist = gl), format = T,
             caption = paste0("Two groups described and compared for",
                              " type \\texttt{surv}."),
             label = "ex:surv1")
@
<<results = 'asis'>>=
dtable_latex(dtable(df, type = "surv", glist = gl3, w = vikt, comp = "across"),
             format = T,  guide = dtg,
             caption = paste("Three weighted groups described and compared",
                             "'across' for type \\texttt{surv}."),
             label = "ex:surv2")
@

\clearpage
\section{Describing more than 1 type faster}

\subsection{\texttt{dtable\_list}}
If one thinks it is a good idea to describe data by type, but annoying to
explicitly type each table, the function \texttt{dtable\_list} and
\texttt{dtable\_list\_latex} tries to alleviate this. The latter function tries
to make intelligent use of \texttt{sprintf} to create good labels and captions
(but you could also give your own vector of labels and captions).

The following creates tables for types \texttt{surv} and \texttt{bnry} with
labels \texttt{tab:foo-surv} and \texttt{tab:foo-bnry}, respectively. The
captions can be shown in Tables \ref{tab:foo-surv} and \ref{tab:foo-surv}.
<<results = 'asis'>>=
dtl <- dtable_list(df, type = c("surv", "bnry"))
dtable_list_latex(dtl, label = "tab:foo-%s", format = TRUE,
                  caption = "%s variables in the data base")
@

Two more examples are generated in \ref{tab:bar-date} and \ref{tab:bar-real}.
<<results = 'asis'>>=
dtl <- dtable_list(df, type = c("date", "real"))
dtable_list_latex(dtl, label = "tab:bar-%s", format = TRUE,
                  caption = "Description of variables of %s type.")
@


\clearpage

\subsection{\texttt{dtables}}
This function creates a column (or columns) for all, or selected, types in a
single table. This compactification is often usefull, but it is at odds with the
general philosophy of this package and it is therefore slightly more cumbersome
to do (unless you use the default values). The function \texttt{dtables}
(distinct from \texttt{dtable}) relies on \texttt{flists} (a list several
\texttt{flist}-lists, one for each type) which specifies how each column is
computed for that type, hence these lists are equal in length. The default
specifies a 'Variables' column which is the name of the variable \emph{and} the
level (for categorical data), a 'Summary' column which is a string of
concatenated information specific for the type, a 'info' column which explains
what info is in the 'Summary' column.

<<results = 'asis'>>=
dt <- dtables(data = df, useNA = "ifany")
dtable_latex(dt, label = "tab:info-raw",
             caption = "Compact table with all types")
@

One might want to completely remove the 'variable' column and move the info
column to the 'info' attribute to get it to print nicely below the table in a
\LaTeX-table. This is done by 'pruning' the table without and with the option
\texttt{info = TRUE}, respectively, which saves the (unique) pruned information.
%Also, there is still some info unexplained so we add something to
%the 'info' attribute.
<<results = 'asis'>>=
tmp1 <- dtable_prune(dt, rm = "variable", info = FALSE)
tmp2 <- dtable_prune(tmp1, rm = "info", info = TRUE)
dtable_latex(tmp2, label = "tab:info", grey = dt$variable,
             caption = "Compact table (pruned) with all types")
@

With \texttt{flists} you can create a list of flist-lists, these need to be of
the same length and have the same names (the names will be overwritten if
not). You can put e.g.\ \texttt{real = TRUE} to accept the default
functions. The defaults for \texttt{dtables} are \emph{different} than for
\texttt{dtable}. See help on \texttt{dt\_desc} and \texttt{dt\_comp} for some
predefined compact-style functions suitable for \texttt{dtables}.

For the defaults to print nicely we will also translate the \texttt{pinfo}
column to a footnote on the \texttt{p} column and supply the guide to get the
labels of the variable names.
<<results = 'asis', eval = TRUE>>=
dlist <- flists(real = TRUE, bnry = TRUE, catg = TRUE) ## get defaults
dt <- dtables(data = df, useNA = "ifany", desc.flists = dlist,
              guide = dtg, test = TRUE, glist = "b1")
tmp1 <- dtable_prune(dt, rm = "variable", info = FALSE)
tmp2 <- dtable_prune(tmp1, rm = "info", info = TRUE)
tmp3 <- dtable_fnote(tmp2, info = "pinfo", fn.var = "p", format = TRUE)
dtable_latex(tmp3, label = "tab:info2", grey = dt$variable,
             caption = paste("Compact table with continuous and",
                             "categorical types."))
@

\clearpage
\section{Additional Functions}

\subsection{Wrapper/convenience functions}

\subsubsection{\texttt{dtable\_std}}
This function calculates the standardized difference for all applicable
variables.  Here we also pass \texttt{attr = FALSE} to \texttt{attr2text} to
supress the inclusion of attributes in the table.

<<results = 'asis'>>=
ds <- dtable_std(data = df, glist = "b1", guide = dtg)
dtable_latex(ds, label = "tab:std", format = TRUE,
             caption = paste0("Standardized differences"),
             bling.param = list(attr = NA))
@

\clearpage
\subsubsection{\texttt{dtable\_missing}}
This simple description of missing provides counts and percentages for variables
in a data frame (regardless of type).

<<results = 'asis'>>=
dm <- dtable_missing(data = df, glist = gl)
dtable_latex(dm, format = TRUE,
             caption = "Information on missing",
             bling.param = list(sep = c(".\\newline ")))
@

\subsubsection{\texttt{dtable\_constants}}
Use this function to get the values of the constants in the data set.


\clearpage
\subsection{Perhaps worthy of more documentation}

\begin{itemize}
\item \texttt{dtable\_prune} remove columns by name or index with the
  possibility of saving the (unique) information in an attribute.
\item \texttt{dtable\_rbind} and \texttt{dtable\_cbind} which are analogous to
  \texttt{rbind} and \texttt{cbind} but for \texttt{dtables}. These try to keep
  the attributes intact, although these need to be used with care as some
  attributes are not mergeable and the results will generally inherit these from
  the first argument (and thus may not be correct for the combined object).
\item \texttt{dtable\_fnote} a function to turn one column into a footnote of
  another (applicable to latex table outputs).
\item \texttt{attr2text} control how some attributes of a \texttt{dtable} is
  translated to a text string.
\item \texttt{dtable\_format} the quick and dirty formating function for
  \texttt{dtable}:s.
\item \texttt{dtable\_subset} subset a dtable without loosing the attributes
  (although it is not always clear that all attributes are correct after
  subsetting).
\end{itemize}




\end{document}
